openapi: 3.0.2
info:
  version: 1.0.0
  title: Invoice, customer, pet API
  description: >-
    This is an OpenAPI Specification generated by Joaswizard (https://github.com/networkinss/joaswizard), 
  contact:
    name: Oliver Glas
    email: oliver.glas@inss.ch
    url: http://inss.ch
  license:
    name: Apache 2.0 license
    url: http://opensource.org/licenses/Apache-2.0
servers:
  - url: http://localhost:8080/v1
    description: Local environment.
    
paths:
  /invoices:
    get:
      description: Returns all Invoices
      operationId: getAllInvoices
      responses:
        '200':
          description: Invoice List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Unexpected internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /invoice/{ID}:
    get:
      description: Returns a Invoice by ID
      operationId: findInvoiceByID
      parameters:
        - name: ID
          in: path
          description: ID of Invoice to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Invoice returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '404':
          description: Data with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Unexpected internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /customers:
    get:
      description: Returns all Customers
      operationId: getAllCustomers
      responses:
        '200':
          description: Customer List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Unexpected internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /customer/{ID}:
    get:
      description: Returns a Customer by ID
      operationId: findCustomerByID
      parameters:
        - name: ID
          in: path
          description: ID of Customer to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Customer returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '404':
          description: Data with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Unexpected internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /pets:
    get:
      description: Returns all Pets
      operationId: getAllPets
      responses:
        '200':
          description: Pet List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Unexpected internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
  /pet/{ID}:
    get:
      description: Returns a Pet by ID
      operationId: findPetByID
      parameters:
        - name: ID
          in: path
          description: ID of Pet to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pet returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '401':
          description: Authorization information is missing or invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '404':
          description: Data with the specified ID was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
        '500':
          description: Unexpected internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
components:
  schemas:
    ErrorModel:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
    Invoice:
      type: object
      properties:
        id:
          type: integer
          format: int32
          maxLength: 14
          example: 1
          description: 'signed 32 bit'
        amount:
          type: integer
          format: int64
          maxLength: 3
          example: 2
          description: 'signed 64 bit (a.k.a long)'
        price:
          type: number
          format: float
          maxLength: 4
          example: 1.0
          description: 'A float sample'
        option:
          type: number
          enum:
          - 1.0
          - 2.0
          - 5.0
          - 8.0
          example: 2.0
          description: 'An enum example.'
        sometext:
          type: string
          description: 'An example of a definition of the type via the database type. The file mapping.json contains the mapping. If none is available, an internal default is used.'
        one:
          type: string
          format: string
          example: eins
        two:
          type: string
          format: byte
          example: byte
          description: 'base64 encoded characters'
        three:
          type: string
          format: binary
          example: binary
          description: 'any sequence of octets'
        four:
          type: boolean
          format: boolean
          example: true
        five:
          type: string
          format: date
          pattern: yyyy-mm-dd
          maxLength: 10
          example: 1998-12-31
          description: 'As defined by full-date - RFC3339'
        six:
          type: string
          format: date-time
          example: 2019-10-12T07:20:50.52Z
          description: 'As defined by date-time - RFC3339'
        seven:
          type: string
          format: password
          example: asecret
          description: 'A hint to UIs to obscure input.'
        eight:
          type: string
          enum:
          - Yes
          - No
          - '0'
          example: Yes
          description: 'An enum example.'
        nine:
          type: string
          format: date-time
          minLength: 6
          description: 'These types from DBDatatype must be mapped in the mapping.json. Oastype would overwrite it if not empty.'
        ten:
          type: string
          minLength: 1
          description: 'Database type CHAR'
        eleven:
          type: string
          format: date
          minLength: 6
          description: 'Database type DATE'
        twelve:
          type: integer
          format: int32
          minLength: 1
          description: 'Database type SMALLINT'
        thirteen:
          type: string
          minLength: 1
          description: 'Database type VARCHAR'
        fourteen:
          type: number
          format: double
          description: 'Database type DECIMAL'
        fifteen:
          type: integer
          format: int64
          description: 'Database type INTEGER'
      required:
      - ID
      - amount
      - option
      - one
      - three
      - five
      - six
      - seven
      - eight
    Customer:
      type: object
      properties:
        id:
          type: integer
          minLength: 1
          description: 'Die Beschreibung'
        zweitername3:
          type: string
          minLength: 1
          description: 'Noch eine Beschreibung'
        dritter name3:
          type: string
          minLength: 1
          description: 'Die dritte Beschreibung.'
      required:
      - ID
      - zweiterName3
    Pet:
      type: object
      properties:
        id:
          type: integer
          minLength: 1
          description: 'Die Beschreibung'
        zweitername:
          type: string
          minLength: 1
          description: 'Noch eine Beschreibung'
        dritter name:
          type: string
          minLength: 1
          description: 'Die dritte Beschreibung.'
      required:
      - ID
      - zweiterName
